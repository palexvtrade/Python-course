import os
import subprocess

def run_command_shell(cmd):
    result = subprocess.run(cmd, shell=True, capture_output=True)

    encodings = ['utf-8', 'cp1251', 'latin-1']
    stdout = ""
    stderr = ""

    for enc in encodings:
        try:
            stdout = result.stdout.decode(enc)
            break
        except (UnicodeDecodeError, LookupError):
            continue
    else:
        stdout = result.stdout.decode('utf-8', errors='replace')

    for enc in encodings:
        try:
            stderr = result.stderr.decode(enc)
            break
        except (UnicodeDecodeError, LookupError):
            continue
    else:
        stderr = result.stderr.decode('utf-8', errors='replace')

    return stdout, stderr, result.returncode

def run_command_safe(args):
    result = subprocess.run(args, capture_output=True)

    encodings = ['utf-8', 'cp1251', 'latin-1']
    stdout = ""
    stderr = ""

    for enc in encodings:
        try:
            stdout = result.stdout.decode(enc)
            break
        except (UnicodeDecodeError, LookupError):
            continue
    else:
        stdout = result.stdout.decode('utf-8', errors='replace')

    for enc in encodings:
        try:
            stderr = result.stderr.decode(enc)
            break
        except (UnicodeDecodeError, LookupError):
            continue
    else:
        stderr = result.stderr.decode('utf-8', errors='replace')

    return stdout, stderr, result.returncode

def check_git_auth():
    stdout, _, _ = run_command_shell("git config user.name")
    name = stdout.strip()
    if not name:
        print("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Git (git config user.name)")
        return False

    stdout, _, _ = run_command_shell("git config user.email")
    email = stdout.strip()
    if not email:
        print("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Git (git config user.email)")
        return False

    stdout, _, code = run_command_shell("gh auth status")
    if code == 0:
        print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ GitHub —á–µ—Ä–µ–∑ GitHub CLI –∫–∞–∫: {name}")
        return True
    else:
        print(f"‚ö†Ô∏è GitHub CLI –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–æ Git –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {name} <{email}>")
        print("üí° –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å SSH –∏–ª–∏ —Ç–æ–∫–µ–Ω ‚Äî –≤—Å—ë –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å.")
        return True

def get_modified_and_untracked_files():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - modified: —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö/—É–¥–∞–ª—ë–Ω–Ω—ã—Ö –∏ —Ç.–¥. —Ñ–∞–π–ª–æ–≤
    - untracked: —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ (??)
    """
    stdout, stderr, code = run_command_shell("git status --porcelain")
    if code != 0:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è 'git status': {stderr}")
        return [], []

    modified = []
    untracked = []

    for line in stdout.splitlines():
        if line.strip():
            status = line[:2].strip()  # –ù–∞–ø—Ä–∏–º–µ—Ä: 'M ', '??'
            file_path = line[3:]
            if status in ['M', 'A', 'D', 'R', 'C']:
                modified.append(file_path)
            elif status == '??':  # –ù–æ–≤—ã–π —Ñ–∞–π–ª
                untracked.append(file_path)

    return modified, untracked

def main():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")

    _, _, code = run_command_shell("git status")
    if code != 0:
        print("‚ùå –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º.")
        return

    if not check_git_auth():
        print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Git –∏–ª–∏ GitHub CLI –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º.")
        return

    modified, untracked = get_modified_and_untracked_files()

    if not modified and not untracked:
        print("‚úÖ –ù–µ—Ç –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö –∏–ª–∏ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤.")
        print("üí° –ï—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–æ–≤—ã–µ ‚Äî –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ 'git add <—Ñ–∞–π–ª>' –∏–ª–∏ 'git add .', –∑–∞—Ç–µ–º —Å–Ω–æ–≤–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç.")
        return

    print(f"üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n{chr(10).join(modified) if modified else '–ù–µ—Ç'}")
    print(f"üÜï –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã:\n{chr(10).join(untracked) if untracked else '–ù–µ—Ç'}")

    confirm = input("\n‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫–æ–º–º–∏—Ç–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ —ç—Ç–∏ —Ñ–∞–π–ª—ã? (y/N): ").strip().lower()
    if confirm != 'y':
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        return

    commit_msg = input("üìù –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞: ").strip()
    if not commit_msg:
        print("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    print("\nüîÑ –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ –∏ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –≤ –∫–æ–º–º–∏—Ç (git add .)...")
    out, err, code = run_command_shell("git add .")
    if code != 0:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {err}")
        return

    print("üìù –î–µ–ª–∞–µ–º –∫–æ–º–º–∏—Ç...")
    out, err, code = run_command_safe(["git", "commit", "-m", commit_msg])
    if code != 0:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–º–∏—Ç–µ: {err}")
        return

    print("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å GitHub (git pull)...")
    out, err, code = run_command_shell("git pull --rebase")
    if code != 0:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ pull (–º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç): {err}")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å git pull –±–µ–∑ --rebase.")
        return

    print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ GitHub...")
    out, err, code = run_command_shell("git push")
    if code != 0:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {err}")
        return

    print("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ GitHub!")

if __name__ == "__main__":
    main()