import subprocess

def run_command_shell(cmd):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç shell-–∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - stdout: –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã (–≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏)
    - stderr: –æ—à–∏–±–∫–∏ (–≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏)
    - returncode: –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ (0 ‚Äî —É—Å–ø–µ—Ö)
    """
    result = subprocess.run(cmd, shell=True, capture_output=True)

    encodings = ['utf-8', 'cp1251', 'latin-1']
    stdout = ""
    stderr = ""

    for enc in encodings:
        try:
            stdout = result.stdout.decode(enc)
            break
        except (UnicodeDecodeError, LookupError):
            continue
    else:
        stdout = result.stdout.decode('utf-8', errors='replace')

    for enc in encodings:
        try:
            stderr = result.stderr.decode(enc)
            break
        except (UnicodeDecodeError, LookupError):
            continue
    else:
        stderr = result.stderr.decode('utf-8', errors='replace')

    return stdout, stderr, result.returncode

def main():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è Git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º...")

    _, _, code = run_command_shell("git status")
    if code != 0:
        print("‚ùå –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º.")
        return

    print("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å GitHub...")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    out, err, code = run_command_shell("git fetch")
    if code != 0:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ 'git fetch':\n{err}")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –ª–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ç–∫–∞ –æ—Ç —É–¥–∞–ª—ë–Ω–Ω–æ–π
    out, err, code = run_command_shell("git status --porcelain=2 --branch")

    if code != 0:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:\n{err}")
        return

    has_updates = False
    for line in out.splitlines():
        if line.startswith("# branch"):
            # –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: # branch.ab +0 -0
            # +0 -0 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ª–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ç–∫–∞ –Ω–∞ 0 –≤–ø–µ—Ä—ë–¥ –∏ 0 –ø–æ–∑–∞–¥–∏ –æ—Ç —É–¥–∞–ª—ë–Ω–Ω–æ–π
            if "+0 -0" not in line:
                has_updates = True
                break

    if has_updates:
        print("üì• –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ GitHub.")
        confirm = input("‚úÖ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Ö –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π? (y/N): ").strip().lower()
        if confirm != 'y':
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            return

        print("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º 'git pull'...")
        out, err, code = run_command_shell("git pull")
        if code != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ 'git pull':\n{err}")
            print("üí° –í–æ–∑–º–æ–∂–Ω–æ, –µ—Å—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å–ª–∏—è–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∏—Ö –≤—Ä—É—á–Ω—É—é.")
            return

        print(f"üì• –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:\n{out}")
    else:
        print("‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ GitHub ‚Äî –ª–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞.")

if __name__ == "__main__":
    main()